#include <Wire.h>
#include <U8g2lib.h>

// Pin Definitions for ESP32
#define BUTTON_CW    12    
#define BUTTON_CCW   13    
#define BUTTON_STOP  14    
#define BUTTON_PRINT 15    
#define FSR_PIN      36    
#define ENA          5     
#define IN1          4     
#define IN2          2     
#define LED1         32    
#define LED2         33    
#define LED3         34    
#define SDA_PIN      21    
#define SCL_PIN      22    

// U8g2 Configuration
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE, SCL_PIN, SDA_PIN);

// Variables
float forceValue = 0;
float maxForce = 0;
float breakExtension = 0;
bool isTesting = false;
unsigned long startTime;
float smoothedForce = 0;
const float alpha = 0.1;  // Smoothing factor (0.1 = strong filtering)

void setup() {
  // Initialize pins
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(BUTTON_CW, INPUT_PULLUP);
  pinMode(BUTTON_CCW, INPUT_PULLUP);
  pinMode(BUTTON_STOP, INPUT_PULLUP);
  pinMode(BUTTON_PRINT, INPUT_PULLUP);
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);

  // Initialize Serial
  Serial.begin(115200);

  // Initialize I2C and U8g2
  Wire.begin(SDA_PIN, SCL_PIN);
  Wire.setClock(400000);
  
  u8g2.begin();
  u8g2.setFont(u8g2_font_ncenB08_tr);  // Choose a font
  u8g2.clearBuffer();
  u8g2.sendBuffer();
  delay(100);
}

void loop() {
  // Read force from FSR with smoothing
  int rawForce = analogRead(FSR_PIN);
  float currentForce = map(rawForce, 0, 4095, 0, 1000) / 100.0;
  smoothedForce = (alpha * currentForce) + ((1 - alpha) * smoothedForce);
  forceValue = smoothedForce;

  // Update max force if testing
  if (isTesting && forceValue > maxForce) {
    maxForce = forceValue;
  }

  // Button controls
  if (digitalRead(BUTTON_CW) == LOW && !isTesting) {
    startTest();
  }
  if (digitalRead(BUTTON_CCW) == LOW) {
    moveCounterClockwise();
  }
  if (digitalRead(BUTTON_STOP) == LOW) {
    stopMotor();
  }
  if (digitalRead(BUTTON_PRINT) == LOW) {
    printReport();
  }

  // Check for break detection
  if (isTesting && forceValue < (maxForce * 0.2)) {
    breakExtension = 10.0; // Placeholder for actual distance
    stopMotor();
    printReport();
    isTesting = false;
  }

  // Update display
  updateDisplay();

  delay(100);
}

void startTest() {
  isTesting = true;
  maxForce = 0;
  startTime = millis();
  digitalWrite(LED1, HIGH);
  moveClockwise();
  Serial.println("Test Started");
}

void moveClockwise() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 255);
}

void moveCounterClockwise() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, 255);
}

void stopMotor() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 0);
  digitalWrite(LED1, LOW);
  Serial.println("Motor Stopped");
}

void updateDisplay() {
  char buffer[10];
  
  u8g2.clearBuffer();
  
  // Display Force
  u8g2.setCursor(0, 10);
  u8g2.print("Force: ");
  dtostrf(forceValue, 5, 2, buffer);
  u8g2.print(buffer);
  u8g2.print(" N");

  // Display Max Force
  u8g2.setCursor(0, 25);
  u8g2.print("Max Force: ");
  dtostrf(maxForce, 5, 2, buffer);
  u8g2.print(buffer);
  u8g2.print(" N");

  u8g2.sendBuffer();
}

void printReport() {
  unsigned long elapsedTime = millis() - startTime;
  Serial.println("Test Report:");
  Serial.print("Duration: ");
  Serial.print(elapsedTime / 1000.0);
  Serial.println(" s");
  Serial.print("Max Force: ");
  Serial.print(maxForce);
  Serial.println(" N");
  Serial.print("Break Extension: ");
  Serial.print(breakExtension);
  Serial.println(" cm");
}
