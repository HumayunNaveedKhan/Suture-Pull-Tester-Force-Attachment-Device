#include <Wire.h>
#include <U8g2lib.h>

// Pin Definitions
#define BUTTON_CW    12    
#define BUTTON_CCW   13    
#define BUTTON_STOP  14    
#define BUTTON_PRINT 15    
#define FSR_PIN      36    
#define ENA          5     
#define IN1          4     
#define IN2          2     
#define LED1         32    
#define LED2         33    
#define LED3         34    
#define SDA_PIN      21    
#define SCL_PIN      22    
#define PROXIMITY_PIN 26    // Proximity sensor

// Printer UART (Using UART1)
#define PRINTER_TX 17  // TX pin for printer
#define PRINTER_RX 16// RX pin for printer

HardwareSerial printerSerial(1);  // Use UART1 for the printer

// OLED Configuration
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE, SCL_PIN, SDA_PIN);

// Variables
float forceValue = 0;
float maxForce = 0;
float breakExtension = 0;
bool isTesting = false;
unsigned long startTime;
float smoothedForce = 0;
const float alpha = 0.1;

void setup() {
  Serial.begin(115200);  // Debug Serial
  printerSerial.begin(9600, SERIAL_8N1, PRINTER_RX, PRINTER_TX);  // Initialize Printer

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(BUTTON_CW, INPUT_PULLUP);
  pinMode(BUTTON_CCW, INPUT_PULLUP);
  pinMode(BUTTON_STOP, INPUT_PULLUP);
  pinMode(BUTTON_PRINT, INPUT_PULLUP);
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(PROXIMITY_PIN, INPUT);

  Wire.begin(SDA_PIN, SCL_PIN);
  Wire.setClock(400000);
  u8g2.begin();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.clearBuffer();
  u8g2.sendBuffer();
}

void loop() {
  int rawForce = analogRead(FSR_PIN);
  float currentForce = map(rawForce, 4095, 0, 0, 1000) / 100.0; 
  currentForce = constrain(currentForce, 0, 10);
  smoothedForce = (alpha * currentForce) + ((1 - alpha) * smoothedForce);
  forceValue = smoothedForce;

  if (isTesting && forceValue > maxForce) {
    maxForce = forceValue;
  }

  if (digitalRead(BUTTON_CW) == LOW && !isTesting) {
    startTest();
  }
  if (digitalRead(BUTTON_CCW) == LOW) {
    moveCounterClockwise();
  }
  if (digitalRead(BUTTON_STOP) == LOW) {
    stopMotor();
  }
  if (digitalRead(BUTTON_PRINT) == LOW) {
    printReport();
  }

  // Proximity Sensor Logic
  int proximityValue = analogRead(PROXIMITY_PIN);
  float distance = map(proximityValue, 0, 4095, 0, 100);  // Convert to mm

  if (distance <= 10) {  
    stopMotor();
    Serial.println("Motor Stopped - Block too close");
  }

  if (isTesting && forceValue < (maxForce * 0.2)) {
    breakExtension = 10.0;
    stopMotor();
    printReport();
    isTesting = false;
  }

  updateDisplay();
  delay(100);
}

void startTest() {
  isTesting = true;
  maxForce = 0;
  startTime = millis();
  digitalWrite(LED1, HIGH);
  moveClockwise();
  Serial.println("Test Started");
}

void moveClockwise() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 255);
}

void moveCounterClockwise() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, 255);
}

void stopMotor() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 0);
  digitalWrite(LED1, LOW);
  Serial.println("Motor Stopped");
}

void updateDisplay() {
  char buffer[10];

  u8g2.clearBuffer();
  u8g2.setCursor(0, 10);
  u8g2.print("Force: ");
  dtostrf(forceValue, 5, 2, buffer);
  u8g2.print(buffer);
  u8g2.print(" N");

  u8g2.setCursor(0, 25);
  u8g2.print("Max Force: ");
  dtostrf(maxForce, 5, 2, buffer);
  u8g2.print(buffer);
  u8g2.print(" N");

  u8g2.sendBuffer();
}

void printReport() {
  unsigned long elapsedTime = millis() - startTime;

  Serial.println("Test Report:");
  Serial.print("Duration: ");
  Serial.print(elapsedTime / 1000.0);
  Serial.println(" s");
  Serial.print("Max Force: ");
  Serial.print(maxForce);
  Serial.println(" N");
  Serial.print("Break Extension: ");
  Serial.print(breakExtension);
  Serial.println(" cm");

  // Print to Printer via UART1
  printerSerial.println("\n------------------------");
  printerSerial.println("   TEST REPORT   ");
  printerSerial.println("------------------------");

  printerSerial.print("Duration: ");
  printerSerial.print(elapsedTime / 1000.0);
  printerSerial.println(" s");

  printerSerial.print("Max Force: ");
  printerSerial.print(maxForce);
  printerSerial.println(" N");

  printerSerial.print("Break Extension: ");
  printerSerial.print(breakExtension);
  printerSerial.println(" cm");

  printerSerial.println("------------------------");
  printerSerial.println("\n\n\n");
}
